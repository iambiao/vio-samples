# Copyright Â© 2019 VMware, Inc. All Rights Reserved.
# SPDX-License-Identifier: BSD-2-Clause

heat_template_version: "2018-08-31"

parameters:
  master_ip:
    type: string

resources:
  copy_kube_certs_master_nodes:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          template: |
            #!/bin/bash
            printf 'Waiting for kube master init'
            until $(curl --output /dev/null --insecure --silent --fail https://$master_ip:6443/healthz); do
              printf '.'
              sleep 5
            done
            USER=ubuntu
            MAIN_MASTER_IP="$master_ip"
            mkdir -p /etc/kubernetes/pki/etcd
            eval $(ssh-agent)
            ssh-add /root/ssh_pvt_key
            printf 'Waiting for certs'
            until $(ssh -o StrictHostKeyChecking=no "${USER}"@$MAIN_MASTER_IP stat /home/ubuntu/kube_certs/ca.crt \> /dev/null 2\>\&1); do
              printf '.'
              sleep 5
            done
            scp -o StrictHostKeyChecking=no "${USER}"@$MAIN_MASTER_IP:/home/ubuntu/kube_certs/ca.crt /etc/kubernetes/pki/
            scp -o StrictHostKeyChecking=no "${USER}"@$MAIN_MASTER_IP:/home/ubuntu/kube_certs/ca.key  /etc/kubernetes/pki/
            scp -o StrictHostKeyChecking=no "${USER}"@$MAIN_MASTER_IP:/home/ubuntu/kube_certs/sa.key /etc/kubernetes/pki/
            scp -o StrictHostKeyChecking=no "${USER}"@$MAIN_MASTER_IP:/home/ubuntu/kube_certs/sa.pub /etc/kubernetes/pki/
            scp -o StrictHostKeyChecking=no "${USER}"@$MAIN_MASTER_IP:/home/ubuntu/kube_certs/front-proxy-ca.crt /etc/kubernetes/pki/
            scp -o StrictHostKeyChecking=no "${USER}"@$MAIN_MASTER_IP:/home/ubuntu/kube_certs/front-proxy-ca.key /etc/kubernetes/pki/
            scp -o StrictHostKeyChecking=no "${USER}"@$MAIN_MASTER_IP:/home/ubuntu/kube_certs/etcd/ca.crt /etc/kubernetes/pki/etcd/
            scp -o StrictHostKeyChecking=no "${USER}"@$MAIN_MASTER_IP:/home/ubuntu/kube_certs/etcd/ca.key /etc/kubernetes/pki/etcd/
            chown -R root:root /etc/kubernetes
          params:
            $master_ip: { get_param: master_ip }

outputs:
  OS::stack_id:
    value: { get_resource: copy_kube_certs_master_nodes }
